{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\12067\\\\Downloads\\\\My Reads Project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport Shelves from './components/Shelves';\nimport Book from './components/Book';\nimport SearchBooks from './components/SearchBooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BooksApp = () => {\n  _s();\n\n  /* TODO: Instead of using this state variable to keep track of which page\n  * we're on, use the URL in the browser's address bar. This will ensure that\n  * users can use the browser's back and forward buttons to navigate between\n  * pages, as well as provide a good URL they can bookmark and share.\n  */\n  const [showSearchPage, setShowSearchPage] = useState(false);\n  const [books, setBooks] = useState([]);\n  const [mapOfIdToBooks, setMapOfIdToBooks] = useState(new Map());\n  const [searchBooks, setSearchBooks] = useState([]);\n  const [mergedBooks, setMergedBooks] = useState([]);\n  useEffect(() => {\n    getAllBooks();\n  }, [showSearchPage]);\n\n  const getAllBooks = () => {\n    BooksAPI.getAll().then(data => {\n      setBooks(data);\n      setMapOfIdToBooks(createMapOfBooks(data));\n    });\n  };\n\n  useEffect(() => {\n    setMergedBooks(searchBooks.map(book => {\n      if (mapOfIdToBooks.has(book.id)) {\n        return mapOfIdToBooks.get(book.id);\n      } else {\n        return book;\n      }\n    }));\n  }, [searchBooks]);\n\n  const createMapOfBooks = books => {\n    const map = new Map();\n    books.map(book => map.set(book.id, book));\n    return map;\n  };\n\n  const updateBookShelf = (book, whereTo) => {\n    const updatedBooks = books.map(b => {\n      if (b.id === book.id) {\n        book.shelf = whereTo;\n        return book;\n      }\n\n      return b;\n    });\n    setBooks(updatedBooks);\n    BooksAPI.update(book, whereTo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: showSearchPage ? /*#__PURE__*/_jsxDEV(SearchBooks, {\n      setShowSearchPage: setShowSearchPage,\n      updateBookShelf: updateBookShelf\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-books\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-books-content\",\n        children: /*#__PURE__*/_jsxDEV(Shelves, {\n          books: books,\n          updateBookShelf: updateBookShelf\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"open-search\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowSearchPage(true),\n          children: \"Add a book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BooksApp, \"DA3XTlMu80jxiRXXmUmxPvqsPu4=\");\n\n_c = BooksApp;\nexport default BooksApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"BooksApp\");","map":{"version":3,"sources":["C:/Users/12067/Downloads/My Reads Project/src/App.js"],"names":["React","useState","useEffect","Header","BooksAPI","Shelves","Book","SearchBooks","BooksApp","showSearchPage","setShowSearchPage","books","setBooks","mapOfIdToBooks","setMapOfIdToBooks","Map","searchBooks","setSearchBooks","mergedBooks","setMergedBooks","getAllBooks","getAll","then","data","createMapOfBooks","map","book","has","id","get","set","updateBookShelf","whereTo","updatedBooks","b","shelf","update"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Header from './components/Header'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport Shelves from './components/Shelves'\nimport Book from './components/Book'\nimport SearchBooks from './components/SearchBooks'\nconst BooksApp = () => {\n\n  /* TODO: Instead of using this state variable to keep track of which page\n  * we're on, use the URL in the browser's address bar. This will ensure that\n  * users can use the browser's back and forward buttons to navigate between\n  * pages, as well as provide a good URL they can bookmark and share.\n  */\n  const [showSearchPage, setShowSearchPage] = useState(false);\n  const [books, setBooks] = useState([])\n  const [mapOfIdToBooks, setMapOfIdToBooks] = useState(new Map());\n  const [searchBooks, setSearchBooks] = useState([]);\n  const [mergedBooks, setMergedBooks] = useState([]);\n\n  useEffect(() => {\n    getAllBooks()\n  }, [showSearchPage])\n\n  const getAllBooks = ()=>{\n    BooksAPI.getAll()\n    .then(data => {\n      setBooks(data) \n      setMapOfIdToBooks(createMapOfBooks(data))\n    }\n    );\n  }\n\n  useEffect(() => {  \n    setMergedBooks(searchBooks.map(book => {\n      if (mapOfIdToBooks.has(book.id)) {\n        return mapOfIdToBooks.get(book.id);\n      } else {\n        return book;\n      }\n    }));\n  }, [searchBooks])\n\n\n  const createMapOfBooks = (books) => {\n    const map = new Map();\n    books.map(book => map.set(book.id, book));\n    return map;\n  }\n\n  const updateBookShelf = (book, whereTo) => {\n    const updatedBooks = books.map(b => {\n      if (b.id === book.id) {\n        book.shelf = whereTo;\n        return book;\n      }\n      return b;\n    })\n    setBooks(updatedBooks);\n    BooksAPI.update(book, whereTo);\n  }\n\n  return (\n    <div className=\"app\">\n      {showSearchPage ? (\n        <SearchBooks setShowSearchPage={setShowSearchPage} updateBookShelf={updateBookShelf} />\n      ) : (\n        <div className=\"list-books\">\n          <Header />\n          <div className=\"list-books-content\">\n            <Shelves books={books} updateBookShelf={updateBookShelf} />\n          </div>\n          <div className=\"open-search\">\n            <button onClick={() => setShowSearchPage(true)}>Add a book</button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n\n}\n\nexport default BooksApp"]},"metadata":{},"sourceType":"module"}